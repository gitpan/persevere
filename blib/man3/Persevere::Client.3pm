.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Persevere::Client 3pm"
.TH Persevere::Client 3pm "2010-03-22" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Persevere::Client \- A Simple to use Interface to Persevere the JSON Database
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module Is a simple interface to Persevere, the \s-1JSON\s0 Database.
.PP
This module provides an interface similar to that of Couchdb::Client
.PP
View documentation on Persevere::Client::Class for information on how
to interact with Persevere Classes.
.PP
use Persevere::Client;
.PP
.Vb 7
\&  my $persvr = Persevere::Client\->new(
\&    host => "localhost",
\&    port => "8080",
\&    auth_type => "basic",
\&    username => "user", 
\&    password => "pass"  
\&  );
\&
\&  die "Unable to connect to $persvr\->{uri}\en" if !($persvr\->testConnection);
\&  my $status;
\&  my $statusreq = $persvr\->serverInfo;
\&  if ($statusreq\->{success}){
\&      $status = $statusreq\->{data};
\&  }
\&  print "VM: $status\->{vm}\enVersion: $status\->{version}\en";
\&  print "Class File Exists\en" if $persvr\->classExists("File");
\&  print "Class Garbage Doesn\*(Aqt Exist\en" if (!($persvr\->classExists("garbage")));
\&  my @class_list;
\&  my $classreq = $persvr\->listClassNames;
\&  if ($classreq\->{success}){
\&      @class_list = @{$classreq\->{data}};
\&  }
.Ve
.SH "MEATHODS"
.IX Header "MEATHODS"
.IP "new" 8
.IX Item "new"
Constructor
.Sp
uri \- Takes a hash or hashref of options: uri which specifies the server's \s-1URI\s0; scheme, host, port which are used if uri isn't provided and default to 'http', 'localhost', and '8080' respectively;
.Sp
json \- which defaults to a JSON::Any object with utf8 and allow_blessed turned on but can be replaced with anything with the same interface;
.Sp
ua \- which is a LWP::UserAgent object and can also be replaced.
.Sp
agent \- Replace the name the defaut LWP::UserAgent reports to the db when it crud's
.Sp
debug \- boolean, defaults to false, set to 1 to enable debug messages (show's crud sent to persevere).
.Sp
auth_type  \- can be set to basic, json-rpc, or none, basic is default, and throws an error without a username and password. json-rpc auth is not yet implemented.
.Sp
query_timeout \- how long to wait until timing out on a request, defaults to 30.
.Sp
exist_is_error \- return an error if a class we try and create already exists
.Sp
showwarnings \- carp warning messages
.IP "testConnection" 8
.IX Item "testConnection"
Returns true if a connection can be made to the server, false otherwise.
.IP "req" 8
.IX Item "req"
All requests made to the server that do not have a boolean response return a req hash. 
  All req hashes contain:
    code \- http status code
    status_line \- http status_line (this is what you use to debug why a request failed)
    success \- false for failure, true for success
    content \- content of the request
    auth \- false if authentication failed for the query, true if authentication succeeded
.Sp
.Vb 11
\&  Successful requests contain:
\&    data \- decoded json data, when assigning this to a variable its type must be declared. most data will be arrays, with the exception of status. 
\&    Example: 
\&    my $postreq = $initialclass\->createObjects(\e@post_data);
\&    if ($postreq\->{success}){
\&        foreach (@{$postreq\->{data}}){
\&            print "$_\en";
\&        }
\&    }else{
\&        warn "unable to post data";
\&    }
\&
\&    range \- if applicable returns the range header information for the request.
\&
\&        using req hashes provides a uniform approach to dealing with error handling for auth, and failed requests.
.Ve
.IP "serverInfo" 8
.IX Item "serverInfo"
Returns a req hash, server metadata is contained in {data}, and is typically something that looks like { id => \*(L"status\*(R", version => \*(L"1.0 beta 2\*(R" ... }. It throws an warning if it can't connect.
.IP "classExists" 8
.IX Item "classExists"
Returns true if a class of that name exists, false otherwise.
.IP "listClassNames" 8
.IX Item "listClassNames"
Returns an req hash, with {data} containing all non core class names that the server knows of.
.IP "class" 8
.IX Item "class"
Returns a new Persevere::Client::Class object for a class of that name. Note that the Class does not need to exist yet, and will not be created if it doesn't. The create meathod will create the class, and is documented in Persevere::Client::Class
.SH "AUTHOR"
.IX Header "AUTHOR"
Nathanael Anderson, \f(CW\*(C`<wirelessdreamer at gm]a[il d[0]t com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-persevere\-client at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Persevere\-Client>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Persevere::Client
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Persevere\-Client>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Persevere\-Client>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Persevere\-Client>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Persevere\-Client/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009 Nathanael Anderson.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
